
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c6  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081a  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a0  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004a  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	19 d0       	rcall	.+50     	; 0xdc <main>
  aa:	29 c0       	rjmp	.+82     	; 0xfe <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 

#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 6e       	ori	r24, 0xE0	; 224
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <Set_A2D_Pin>:
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}

void Set_A2D_Pin(unsigned char pinNum) {
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	60 f0       	brcs	.+24     	; 0xd6 <Set_A2D_Pin+0x1c>
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 83       	st	Z, r24
	// ADATE: setting this bit enables auto-triggering. Since we are
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}

void Set_A2D_Pin(unsigned char pinNum) {
  c6:	8f e0       	ldi	r24, 0x0F	; 15
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
	// Allow channel to stabilize
	static unsigned char i = 0;
	for ( i=0; i<15; i++ ) { asm("nop"); }
  c8:	00 00       	nop
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	e9 f7       	brne	.-6      	; 0xc8 <Set_A2D_Pin+0xe>
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  d4:	08 95       	ret
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}

void Set_A2D_Pin(unsigned char pinNum) {
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  da:	f5 cf       	rjmp	.-22     	; 0xc6 <Set_A2D_Pin+0xc>

000000dc <main>:
}


int main(void)
{
    DDRB = 0xFF; PORTB = 0x00;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
  e0:	15 b8       	out	0x05, r1	; 5
    DDRD = 0xFF; PORTD = 0x00;
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	1b b8       	out	0x0b, r1	; 11
    DDRA = 0x00; PORTA = 0xFF;
  e6:	11 b8       	out	0x01, r1	; 1
    ADC_init();
    // Sets PA0 to be input pin for A2D conversion
    Set_A2D_Pin(0x01);
  e8:	82 b9       	out	0x02, r24	; 2
  ea:	e1 df       	rcall	.-62     	; 0xae <ADC_init>

    while (1)
    {
	    unsigned short my_short = ADC; //0xABCD
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	e5 df       	rcall	.-54     	; 0xba <Set_A2D_Pin>
  f0:	e8 e7       	ldi	r30, 0x78	; 120
  f2:	f0 e0       	ldi	r31, 0x00	; 0
	    unsigned char my_char = (char)my_short; // my_char = 0xCD
	    PORTB = my_char;
  f4:	80 81       	ld	r24, Z
	    my_char = (char)(my_short >> 8); // my_char = 0xAB
	    PORTD = my_char;
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	9b b9       	out	0x0b, r25	; 11
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <main+0x18>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
